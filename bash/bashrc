##########################################################
#	My standard bashrc
##########################################################
#set a civilized mode :)
export EDITOR=vi
##################################################################
#	Pull in some standard dotfiles
source ${HOME}/.dotfiles/bash/git-prompt.sh

##################################################################
#aliases I want everywhere
alias ctc='cd ${PWD} && clear'
alias eigo="export LANG=C;export LC_ALL=C"
alias src="echo \"Updating Settings\" && . ~/.bash_profile"
alias vundleup="/usr/bin/vim +BundleInstall +qall"
alias diary="cd ${HOME}/Documents/VimWiki && git pull origin master && vim +VimwikiMakeDiaryNote && git commit -a -m\"diary entry\" && git push origin master "
alias wiki="cd ${HOME}/Documents/VimWiki && git pull origin master && vim +VimwikiIndex && git commit -a -m\"wiki entry\" && git push origin master "
alias vw="cd ${HOME}/Documents/VimWiki && vim +VimwikiIndex "
alias k="set -o vi"

if [ -x /usr/bin/nvim ] || [ -x /usr/local/bin/nvim ] ; then
	alias vim=`which nvim`
fi
##################################################################
#	Add some autocomplete fun
if gem list |grep -q teamocil ; then
	complete -W "$(teamocil --list)" teamocil
fi
##################################################################
# fix some GPG stuff
GPG_TTY=`tty` 
export GPG_TTY 
##################################################################
#Ubuntu specific change for your needs
if [ -e /lib/terminfo/x/xterm-256color ]; then
	export TERM="xterm-256color"
else
	export TERM="xterm"
fi
##################################################################
#rvm
if [[ -s $HOME/.rvm/scripts/rvm ]] ; then
	PATH=$HOME/bin:${PATH}		# Add my bin path
	PATH=$HOME/.rvm/bin:${PATH} 	# Add RVM to PATH for scripting
fi

# tfenv 
if [[ -f ${HOME}/bin/tfenv/bin/tfenv ]] ; then
	PATH=${HOME}/bin/tfenv/bin:${PATH} 	
fi

# goenv
if [[ -d ${HOME}/.goenv/shims ]] ; then
	PATH=${HOME}/.goenv/shims:${PATH} 	
fi



##################################################################
# Get stuff based on wireless network connection

# or hostname
HOSTNAME=`hostname`
# source in any host specific stuff
if [ -f ${HOME}/.dotfiles/bash/aliases/${HOSTNAME} ]; then
	.  ${HOME}/.dotfiles/bash/aliases/${HOSTNAME} 
fi
# source in any host specific stuff that I don't want on github
if [ -f ${HOME}/.dotfiles/bash/aliases/${HOSTNAME}.secret ]; then
	.  ${HOME}/.dotfiles/bash/aliases/${HOSTNAME}.secret
fi
# source in any host specific stuff that I don't want on github
if [ -x /usr/bin/nmcli ]; then
	if /usr/bin/nmcli devices 2>/dev/null |grep -q wlan0  ; then 
		WIFI=`nmcli device show wlan0|grep GENERAL.CONNECTION |awk '{print $NF}'`
	fi
fi
if [ "X${WIFI}" != "X" ] ; then
	if [ -f ${HOME}/.dotfiles/bash/aliases/${WIFI}.secret ]; then
		.  ${HOME}/.dotfiles/bash/aliases/${WIFI}.secret
	fi
fi

if [ -f /tmp/.${USER}.iru ] ; then
	IRU=`cat /tmp/.${USER}.iru`
fi
if [ "X${IRU}" != "X" ] ; then
	if [ -f ${HOME}/.dotfiles/bash/aliases/${IRU}.secret ]; then
		.  ${HOME}/.dotfiles/bash/aliases/${IRU}.secret
	fi
fi

##################################################################
if ! [ -d ${HOME}/tmp/${USERNAME}-vim ] ; then
	mkdir -p ${HOME}/tmp/vim
fi

# Git stuff
source ${HOME}/.dotfiles/bash/git-completion.bash
alias gitclean='git branch --merged master | grep -v "\* master" | xargs -n 1 git branch -d '

##################################################################
# Set the TMUX window title to the host being SSH'd to!!
ssh() {
    if [ "$(ps -p $(ps -p $$ -o ppid=) -o comm=)" = "tmux" ]; then
	    short_name=`echo $* |awk -F'.' '{print $1}'`
	    tmux rename-window "${short_name}"
            command ssh "$@"
            tmux set-window-option automatic-rename "on" 1>/dev/null
    else
            command ssh "$@"
    fi
}

# Set the tmux title eg add to .rvmrc settitle REPO
st() {
	if  [ "${TMUX_PANE}X" != "X" ] ; then
		printf "\033k$1\033\\"
	fi
}

#  Customize BASH PS1 prompt to show current GIT repository and branch.
#  by Mike Stewart - http://MediaDoneRight.com

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape sequences.
#  I don't remember where I found this.  o_O

# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White

# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
User="\u"
Host="\h"
NewLine="\n"
Jobs="\j"

vcs_action_glyph="î‚°"
HostPrompt="$BIWhite$On_Blue$User@$Host"
CleanGitOpen="$Blue$On_Green${vcs_action_glyph}$BIWhite$On_Green"
CleanGitClose="$Green$On_Blue${vcs_action_glyph}"
DirtyGitOpen="$Blue$On_Red${vcs_action_glyph}$BIWhite$On_Red"
DirtyGitClose="$Red$On_Blue${vcs_action_glyph}"
OnPath="$BYellow$On_Blue$PathShort"
OffPath="$Blue$On_Red${vcs_action_glyph}"
OffPathShort=" $Blue${vcs_action_glyph}$Color_Off"
RubyOn="$BIWhite$On_Red"
RubyOff="$Red${vcs_action_glyph}"

if [ -f ${HOME}/.rvm/bin/rvm-prompt ]; then

export PS1=$HostPrompt'$(git branch &>/dev/null;\
	if [ $? -eq 0 ]; then \
		  echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
		    if [ "$?" -eq "0" ]; then \
			        # @4 - Clean repository - nothing to commit
    echo "'$CleanGitOpen'"$(__git_ps1 " (%s)") "'$CleanGitClose'"; \
	      else \
		          # @5 - Changes to working tree
        echo "'$DirtyGitOpen'"$(__git_ps1 " {%s}") "'$DirtyGitClose'"; \
	fi) '$OnPath$OffPath$RubyOn' $(~/.rvm/bin/rvm-prompt v p g)$(ls -A *.tf &>/dev/null ; if [ $? -eq 0 ]; then tf=`terraform --version |grep "^Terraform"|cut -d " " -f 2`;echo "/TF-${tf}"; fi) '$RubyOff$Color_Off'\n$ "; \
	  else \
		    # @2 - Prompt when not in GIT repo
	echo "'$On_Blue'  '$OnPath$OffPathShort$Color_Off'\n$ "; \
	  fi)'
else

export PS1=$HostPrompt'$(git branch &>/dev/null;\
	if [ $? -eq 0 ]; then \
		  echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
		    if [ "$?" -eq "0" ]; then \
			        # @4 - Clean repository - nothing to commit
    echo "'$CleanGitOpen'"$(__git_ps1 " (%s)"); \
	      else \
		          # @5 - Changes to working tree
        echo "'$DirtyGitOpen'"$(__git_ps1 " {%s}"); \
		  fi) '$OnPath$OffPath$Color_Off'\n\$ "; 
	  else \
		    # @2 - Prompt when not in GIT repo
	echo " '$OnPath$OffPath' $(ls -A *.tf &>/dev/null ; if [ $? -eq 0 ]; then tf=`terraform --version |grep "^Terraform"|cut -d " " -f 2`;echo "/TF-${tf}"; fi) '$Color_Off'\n\$ "; \
	  fi)'
fi

